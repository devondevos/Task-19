{"version":3,"sources":["components/Home.jsx","components/Music.jsx","components/Books.jsx","components/Favorite.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","React","Component","Music","musicSearch","a","search","state","musicInput","split","join","fetch","type","getMusic","json","res","setState","data","favoriteMusic","i","favPic","id","trackId","artist","artistName","artwork","artworkUrl100","track","trackName","sample","previewUrl","method","headers","body","JSON","stringify","then","console","log","onChange","e","target","value","onClick","this","map","sort_data","key","src","alt","controls","Books","bookSearch","bookInput","getBook","favoriteBook","description","alert","Favorite","deleteMusic","musicToDelete","deleted","document","location","reload","deleteBooks","booksToDelete","favMusic","favBooks","music","books","favM","favB","App","to","path","component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f45d34a3.chunk.js","sourcesContent":["import React from 'react';\r\nclass Home extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Welcome!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Home","// Import react\r\nimport React from 'react';\r\n\r\nclass Music extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            data: [],\r\n            musicInput: ''\r\n        }\r\n    }\r\n    newSearch(){\r\n        fetch('/music')\r\n            .then(res => res.json())\r\n            .then(data => this.setState({data}, () => console.log('info fetched...', data)))\r\n    }\r\n    musicSearch = async () => {\r\n        let search = this.state.musicInput.split(' ').join('+')\r\n        const getMusic = await fetch(`/music?search=${search}&type=${this.state.type}`)\r\n        let res = await getMusic.json()\r\n        this.setState({\r\n            data: res\r\n        })\r\n    }\r\n\r\n    favoriteMusic= (i) => {\r\n        let favPic = {\r\n            id: i.trackId,\r\n            artist: i.artistName,\r\n            artwork: i.artworkUrl100,\r\n            track: i.trackName,\r\n            sample: i.previewUrl\r\n        }\r\n        fetch('/favoritesMusic', {\r\n            method: 'POST',\r\n            headers : {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body: JSON.stringify(favPic)\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>iTunes</h1>\r\n                <input type=\"text\" onChange={(e) => this.setState({musicInput: e.target.value})}/>\r\n                <button onClick={() => this.musicSearch()}>Search</button>\r\n\r\n                <fieldset>\r\n                    {this.state.data.map(sort_data => <article key={sort_data.trackId}>{sort_data.artistName}<br/>\r\n                    {sort_data.trackName}<br/><img src={sort_data.artworkUrl100} alt={sort_data.trackId}/>\r\n                    {console.log(sort_data)}<br/><audio controls><source src={sort_data.previewUrl}type='audio/mpeg'></source></audio>\r\n                    <button onClick={() =>this.favoriteMusic(sort_data)}>Favorite</button>\r\n                    </article>)}\r\n                </fieldset>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\nclass Books extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            data: [],\r\n            bookInput: ''\r\n        }\r\n    }\r\n    newSearch(){\r\n        fetch('/books')\r\n            .then(res => res.json())\r\n            .then(data => this.setState({data}, () => console.log('info fetched...', data)))\r\n    }\r\n    bookSearch = async () => {\r\n        let search = this.state.bookInput.split(' ').join('+')\r\n        const getBook = await fetch(`/book?search=${search}&type=${this.state.type}`)\r\n        let res = await getBook.json()\r\n        this.setState({\r\n            data: res\r\n        })\r\n        console.log(res);\r\n    }\r\n    favoriteBook= (i) => {\r\n        let favPic = {\r\n            id: i.trackId,\r\n            artist: i.artistName,\r\n            artwork: i.artworkUrl100,\r\n            track: i.trackName,\r\n            description: i.description\r\n        }\r\n        fetch('/favoritesBooks', {\r\n            method: 'POST',\r\n            headers : {\r\n                \"Content-Type\" : \"application/json\"\r\n            },\r\n            body: JSON.stringify(favPic)\r\n        })\r\n        alert('Added to favorites')\r\n        console.log(favPic);\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>E-books</h1>\r\n                <input type=\"text\" onChange={(e) => this.setState({bookInput: e.target.value})}/>\r\n                <button onClick={() => this.bookSearch()}>Search</button>\r\n\r\n                <fieldset>\r\n                    {this.state.data.map(sort_data => <article key={sort_data.trackId}>{sort_data.artistName}<br/>\r\n                    {sort_data.trackName}<br/>\r\n                    <p>{sort_data.description}</p><br/>\r\n                    <img src={sort_data.artworkUrl100} alt='bookPic'/>\r\n                    <button onClick={() => {this.favoriteBook(sort_data)}}>Favorite</button>\r\n                    </article>)}\r\n                </fieldset>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Books","import React from 'react';\r\n\r\n\r\nclass Favorite extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            favMusic: [],\r\n            favBooks: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('/favoritesMusic')\r\n            .then(res => res.json())\r\n            .then(music => this.setState({favMusic: music}, () => console.log('fetched...', music)))\r\n\r\n            fetch('/favoritesBooks')\r\n            .then(res => res.json())\r\n            .then(books => this.setState({favBooks: books}, () => console.log('fetched...', books)))\r\n    }\r\n\r\n    deleteMusic = (i) => {\r\n        let musicToDelete = {\r\n            deleted: i.id\r\n        }\r\n        fetch('/favoritesMusic', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(musicToDelete)\r\n        })\r\n        document.location.reload()\r\n    }\r\n\r\n    deleteBooks = (i) => {\r\n        let booksToDelete = {\r\n            deleted: i.id\r\n        }\r\n        fetch('/favoritesBooks', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(booksToDelete)\r\n        })\r\n        document.location.reload()\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <fieldset>\r\n                    {this.state.favMusic.map(favM => <article key={favM.trackId}><p>{favM.artist}</p><p>{favM.trackId}</p>\r\n                        <img src={favM.artwork} alt='artwork'/><br/>\r\n                        <audio controls><source src={favM.sample}/></audio>\r\n                        <p>{favM.track}</p>\r\n                        <button onClick={() => {this.deleteMusic(favM)}}>Remove</button>\r\n\r\n                    </article>)}\r\n                </fieldset>\r\n                <fieldset>\r\n                    {this.state.favBooks.map(favB => <article key={favB.artwork}><p>{favB.artist}</p>\r\n                        <img src={favB.artwork} alt='artwork'/><br/>\r\n                        <p>{favB.description}</p>\r\n                        <p>{favB.track}</p>\r\n                        <button onClick={() => {this.deleteBooks(favB)}}>Remove</button>\r\n\r\n                    </article>)}\r\n                </fieldset>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Favorite","import React from 'react';\n\nimport './App.css';\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\n\nimport Home from './components/Home'\nimport Music from './components/Music'\nimport Books from './components/Books'\nimport Favorite from './components/Favorite'\n\nclass App extends React.Component {\n  cons\n  render(){\n    return (\n      <Router >\n        <Home/>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to={'/'}>Home</Link>\n              </li>\n              <li>\n                <Link to={'/Music'}>Search Music</Link>\n              </li>\n              <li>\n                <Link to={'/Books'}>Search Books</Link>\n              </li>\n              <li>\n                <Link to={'/Favorite'}>Favorites</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n          <Route path='/Home' component={Home}/>\n            <Route path='/Music' component={Music}/>\n            <Route path='/Books' component={Books}/>\n            <Route path='/Favorite' component={Favorite}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}